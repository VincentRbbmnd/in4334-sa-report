// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GHCrawler": CLI Commands
//
// Command:
// $ goagen
// --design=github-crawler-api/design
// --out=$(GOPATH)\src\github-crawler-api
// --version=v1.2.0-dirty

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github-crawler-api/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// ListCommitsCommand is the command line data structure for the list action of commits
	ListCommitsCommand struct {
		// Repository ID
		RepoID int
		// From date
		From string
		// Limit the results
		Limit int
		// Till ID
		Until       string
		PrettyPrint bool
	}

	// ShowCommitsCommand is the command line data structure for the show action of commits
	ShowCommitsCommand struct {
		// Repository ID
		RepoID int
		// SHA of the commit
		Sha         string
		PrettyPrint bool
	}

	// ListRepositoriesCommand is the command line data structure for the list action of repositories
	ListRepositoriesCommand struct {
		PrettyPrint bool
	}

	// ShowRepositoriesCommand is the command line data structure for the show action of repositories
	ShowRepositoriesCommand struct {
		// Repository ID
		RepoID      int
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp1 := new(ListCommitsCommand)
	sub = &cobra.Command{
		Use:   `commits ["/v1/repositories/REPOID/commits/list"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(ListRepositoriesCommand)
	sub = &cobra.Command{
		Use:   `repositories ["/v1/repositories/list"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp3 := new(ShowCommitsCommand)
	sub = &cobra.Command{
		Use:   `commits ["/v1/repositories/REPOID/commits/SHA"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(ShowRepositoriesCommand)
	sub = &cobra.Command{
		Use:   `repositories ["/v1/repositories/REPOID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the ListCommitsCommand command.
func (cmd *ListCommitsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/repositories/%v/commits/list", cmd.RepoID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp5 *time.Time
	if cmd.From != "" {
		var err error
		tmp5, err = timeVal(cmd.From)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--from", "err", err)
			return err
		}
	}
	var tmp6 *time.Time
	if cmd.Until != "" {
		var err error
		tmp6, err = timeVal(cmd.Until)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *time.Time value", "flag", "--until", "err", err)
			return err
		}
	}
	resp, err := c.ListCommits(ctx, path, tmp5, intFlagVal("limit", cmd.Limit), tmp6)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCommitsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var repoID int
	cc.Flags().IntVar(&cmd.RepoID, "repoID", repoID, `Repository ID`)
	var from string
	cc.Flags().StringVar(&cmd.From, "from", from, `From date`)
	var limit int
	cc.Flags().IntVar(&cmd.Limit, "limit", limit, `Limit the results`)
	var until string
	cc.Flags().StringVar(&cmd.Until, "until", until, `Till ID`)
}

// Run makes the HTTP request corresponding to the ShowCommitsCommand command.
func (cmd *ShowCommitsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/repositories/%v/commits/%v", cmd.RepoID, url.QueryEscape(cmd.Sha))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowCommits(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowCommitsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var repoID int
	cc.Flags().IntVar(&cmd.RepoID, "repoID", repoID, `Repository ID`)
	var sha string
	cc.Flags().StringVar(&cmd.Sha, "sha", sha, `SHA of the commit`)
}

// Run makes the HTTP request corresponding to the ListRepositoriesCommand command.
func (cmd *ListRepositoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/repositories/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListRepositories(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListRepositoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowRepositoriesCommand command.
func (cmd *ShowRepositoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/repositories/%v", cmd.RepoID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowRepositories(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowRepositoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var repoID int
	cc.Flags().IntVar(&cmd.RepoID, "repoID", repoID, `Repository ID`)
}
