// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GHCrawler": developers Resource Client
//
// Command:
// $ goagen
// --design=github.com\VincentRbbmnd\in4334-sa-report\github-crawler-api\design
// --out=$(GOPATH)\src\github.com\VincentRbbmnd\in4334-sa-report\github-crawler-api
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// ListDevelopersPath computes a request path to the list action of developers.
func ListDevelopersPath(repoID int) string {
	param0 := strconv.Itoa(repoID)

	return fmt.Sprintf("/v1/repositories/%s/developers/list", param0)
}

// Retrieve developers between timespan with users
func (c *Client) ListDevelopers(ctx context.Context, path string, from *time.Time, limit *int, until *time.Time) (*http.Response, error) {
	req, err := c.NewListDevelopersRequest(ctx, path, from, limit, until)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDevelopersRequest create the request corresponding to the list action endpoint of the developers resource.
func (c *Client) NewListDevelopersRequest(ctx context.Context, path string, from *time.Time, limit *int, until *time.Time) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if from != nil {
		tmp13 := from.Format(time.RFC3339)
		values.Set("from", tmp13)
	}
	if limit != nil {
		tmp14 := strconv.Itoa(*limit)
		values.Set("limit", tmp14)
	}
	if until != nil {
		tmp15 := until.Format(time.RFC3339)
		values.Set("until", tmp15)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
