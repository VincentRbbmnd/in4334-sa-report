// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GHCrawler": Model Helpers
//
// Command:
// $ goagen
// --design=github-crawler-api/design
// --out=$(GOPATH)\src\github-crawler-api
// --version=v1.2.0-dirty

package models

import (
	"context"
	"github-crawler-api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// MediaType Retrieval Functions

// ListGhuser returns an array of view: default.
func (m *UserDB) ListGhuser(ctx context.Context) []*app.Ghuser {
	defer goa.MeasureSince([]string{"goa", "db", "ghuser", "listghuser"}, time.Now())

	var native []*User
	var objs []*app.Ghuser
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing User", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.UserToGhuser())
	}

	return objs
}

// UserToGhuser loads a User and builds the default view of media type Ghuser.
func (m *User) UserToGhuser() *app.Ghuser {
	user := &app.Ghuser{}
	user.ID = m.ID
	user.Login = m.Login
	user.Type = m.Type

	return user
}

// OneGhuser loads a User and builds the default view of media type Ghuser.
func (m *UserDB) OneGhuser(ctx context.Context, id int) (*app.Ghuser, error) {
	defer goa.MeasureSince([]string{"goa", "db", "ghuser", "oneghuser"}, time.Now())

	var native User
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting User", "error", err.Error())
		return nil, err
	}

	view := *native.UserToGhuser()
	return &view, err
}
