// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GHCrawler": Models
//
// Command:
// $ goagen
// --design=github-crawler-api/design
// --out=$(GOPATH)\src\github-crawler-api
// --version=v1.2.0-dirty

package models

import (
	"context"
	"github-crawler-api/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// Github repository model in DB
type Repository struct {
	ID        int `gorm:"primary_key"` // primary key
	CreatedAt time.Time
	DeletedAt *time.Time
	FullName  string
	Org       bool
	Owner     string
	ProjectID float64
	Raw       string `sql:"type:jsonb"`
	UpdatedAt time.Time
	UserType  string
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Repository) TableName() string {
	return "repositories"

}

// RepositoryDB is the implementation of the storage interface for
// Repository.
type RepositoryDB struct {
	Db *gorm.DB
}

// NewRepositoryDB creates a new storage type.
func NewRepositoryDB(db *gorm.DB) *RepositoryDB {
	return &RepositoryDB{Db: db}
}

// DB returns the underlying database.
func (m *RepositoryDB) DB() interface{} {
	return m.Db
}

// RepositoryStorage represents the storage interface.
type RepositoryStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Repository, error)
	Get(ctx context.Context, id int) (*Repository, error)
	Add(ctx context.Context, repository *Repository) error
	Update(ctx context.Context, repository *Repository) error
	Delete(ctx context.Context, id int) error

	ListRepository(ctx context.Context) []*app.Repository
	OneRepository(ctx context.Context, id int) (*app.Repository, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *RepositoryDB) TableName() string {
	return "repositories"

}

// CRUD Functions

// Get returns a single Repository as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *RepositoryDB) Get(ctx context.Context, id int) (*Repository, error) {
	defer goa.MeasureSince([]string{"goa", "db", "repository", "get"}, time.Now())

	var native Repository
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Repository
func (m *RepositoryDB) List(ctx context.Context) ([]*Repository, error) {
	defer goa.MeasureSince([]string{"goa", "db", "repository", "list"}, time.Now())

	var objs []*Repository
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *RepositoryDB) Add(ctx context.Context, model *Repository) error {
	defer goa.MeasureSince([]string{"goa", "db", "repository", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Repository", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *RepositoryDB) Update(ctx context.Context, model *Repository) error {
	defer goa.MeasureSince([]string{"goa", "db", "repository", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Repository", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *RepositoryDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "repository", "delete"}, time.Now())

	var obj Repository

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Repository", "error", err.Error())
		return err
	}

	return nil
}
