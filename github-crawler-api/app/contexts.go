// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GHCrawler": Application Contexts
//
// Command:
// $ goagen
// --design=github-crawler-api/design
// --out=$(GOPATH)\src\github-crawler-api
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// ListCommitsContext provides the commits list action context.
type ListCommitsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ListPayload
}

// NewListCommitsContext parses the incoming request URL and body, performs validations and creates the
// context used by the commits controller list action.
func NewListCommitsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCommitsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCommitsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCommitsContext) OK(r CommitCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.commit+json; type=collection")
	if r == nil {
		r = CommitCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *ListCommitsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCommitsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCommitsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowCommitsContext provides the commits show action context.
type ShowCommitsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CommitID int
}

// NewShowCommitsContext parses the incoming request URL and body, performs validations and creates the
// context used by the commits controller show action.
func NewShowCommitsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCommitsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCommitsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCommitID := req.Params["commitID"]
	if len(paramCommitID) > 0 {
		rawCommitID := paramCommitID[0]
		if commitID, err2 := strconv.Atoi(rawCommitID); err2 == nil {
			rctx.CommitID = commitID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("commitID", rawCommitID, "integer"))
		}
		if rctx.CommitID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`commitID`, rctx.CommitID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCommitsContext) OK(r *Commit) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.commit+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCommitsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCommitsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
