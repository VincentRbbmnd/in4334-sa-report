// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "GHCrawler": Application Media Types
//
// Command:
// $ goagen
// --design=github-crawler-api/design
// --out=$(GOPATH)\src\github-crawler-api
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// Commit data (default view)
//
// Identifier: application/vnd.commit+json; view=default
type Commit struct {
	// Owner of the commit
	Author *Ghuser `form:"author" json:"author" xml:"author"`
	// ID of the commit in the database
	ID int `form:"id" json:"id" xml:"id"`
	// Message of the commit
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Unique identifier of the commit
	Sha string `form:"sha" json:"sha" xml:"sha"`
	// Time the commit happened
	Timestamp time.Time `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// Validate validates the Commit media type instance.
func (mt *Commit) Validate() (err error) {

	if mt.Sha == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "sha"))
	}
	if mt.Author == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "author"))
	}

	if mt.Author != nil {
		if err2 := mt.Author.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// CommitCollection is the media type for an array of Commit (default view)
//
// Identifier: application/vnd.commit+json; type=collection; view=default
type CommitCollection []*Commit

// Validate validates the CommitCollection media type instance.
func (mt CommitCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// GH user data (default view)
//
// Identifier: application/vnd.ghuser+json; view=default
type Ghuser struct {
	// ID of the user in the database
	ID int `form:"id" json:"id" xml:"id"`
	// Location of the user
	Location *Location `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Unique username of the user
	Login string `form:"login" json:"login" xml:"login"`
	// Type of the user
	Type string `form:"type" json:"type" xml:"type"`
}

// Validate validates the Ghuser media type instance.
func (mt *Ghuser) Validate() (err error) {

	if mt.Login == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "login"))
	}
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	if mt.Location != nil {
		if err2 := mt.Location.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Location as geocoordinates (default view)
//
// Identifier: application/vnd.location+json; view=default
type Location struct {
	// ID of the location in the database
	ID int `form:"id" json:"id" xml:"id"`
	// coordinates lat
	Lat string `form:"lat" json:"lat" xml:"lat"`
	// coordinates lng
	Lng string `form:"lng" json:"lng" xml:"lng"`
}

// Validate validates the Location media type instance.
func (mt *Location) Validate() (err error) {

	if mt.Lat == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "lat"))
	}
	if mt.Lng == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "lng"))
	}
	return
}
